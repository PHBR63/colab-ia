#!/usr/bin/env python3
"""
Script de teste para demonstrar o funcionamento do sistema WebGIS
"""

import requests
import json
import time
import sys

def test_webgis_system():
    """Testa o sistema WebGIS"""
    
    base_url = "http://localhost:5000"
    
    print("üó∫Ô∏è  TESTANDO SISTEMA WEBGIS")
    print("=" * 50)
    
    # Teste 1: Verificar se o servidor est√° rodando
    print("\n1. Testando conex√£o com o servidor...")
    try:
        response = requests.get(base_url, timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor est√° rodando!")
        else:
            print(f"‚ùå Servidor retornou status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao conectar com o servidor: {e}")
        print("üí° Certifique-se de que a aplica√ß√£o Flask est√° rodando na porta 5000")
        return False
    
    # Teste 2: Verificar endpoint de camadas ativas
    print("\n2. Testando endpoint de camadas ativas...")
    try:
        response = requests.get(f"{base_url}/api/admin/layers/active", timeout=5)
        if response.status_code == 200:
            layers = response.json()
            print(f"‚úÖ Endpoint funcionando! Encontradas {len(layers)} camadas ativas")
            if layers:
                for layer in layers:
                    print(f"   - {layer['name']}: {layer['description']}")
            else:
                print("   ‚ÑπÔ∏è  Nenhuma camada ativa encontrada (normal para instala√ß√£o nova)")
        else:
            print(f"‚ùå Erro no endpoint: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar endpoint: {e}")
    
    # Teste 3: Verificar p√°gina de login
    print("\n3. Testando p√°gina de login...")
    try:
        response = requests.get(f"{base_url}/admin/login", timeout=5)
        if response.status_code == 200 and "WebGIS Admin" in response.text:
            print("‚úÖ P√°gina de login carregou corretamente!")
        else:
            print(f"‚ùå Erro na p√°gina de login: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao acessar p√°gina de login: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ TESTE CONCLU√çDO!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print(f"1. Acesse: {base_url}")
    print("2. Para administra√ß√£o: {}/admin/login".format(base_url))
    print("3. Credenciais: admin / admin123")
    print("4. Use o arquivo 'exemplo_geojson.json' para testar upload de camadas")
    
    return True

def show_system_info():
    """Mostra informa√ß√µes sobre o sistema"""
    print("\nüìñ INFORMA√á√ïES DO SISTEMA WEBGIS")
    print("=" * 50)
    print("üîß Funcionalidades:")
    print("   ‚Ä¢ Visualiza√ß√£o interativa de mapas com Leaflet.js")
    print("   ‚Ä¢ Upload e gerenciamento de arquivos GeoJSON")
    print("   ‚Ä¢ Painel de administra√ß√£o web")
    print("   ‚Ä¢ Controle de visibilidade de camadas")
    print("   ‚Ä¢ Estilos personalizados para camadas")
    print("   ‚Ä¢ Popups informativos para elementos do mapa")
    
    print("\nüåê URLs Principais:")
    print("   ‚Ä¢ Mapa Principal: http://localhost:5000")
    print("   ‚Ä¢ Login Admin: http://localhost:5000/admin/login")
    print("   ‚Ä¢ Painel Admin: http://localhost:5000/admin")
    
    print("\nüìÅ Arquivos Principais:")
    print("   ‚Ä¢ src/app.py - Backend Flask")
    print("   ‚Ä¢ src/templates/ - Templates HTML")
    print("   ‚Ä¢ exemplo_geojson.json - Arquivo de exemplo")
    print("   ‚Ä¢ README.md - Documenta√ß√£o completa")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--info":
        show_system_info()
    else:
        # Aguardar um pouco para o servidor iniciar
        print("‚è≥ Aguardando servidor iniciar...")
        time.sleep(3)
        test_webgis_system()